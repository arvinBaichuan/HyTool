package com.baichuan.hy.tool.ui.form.func;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.baichuan.hy.tool.ui.component.textviewer.RegexRSyntaxTextViewer;
import com.baichuan.hy.tool.ui.component.textviewer.RegexRTextScrollPane;
import com.baichuan.hy.tool.ui.listener.func.FileReformatListener;
import com.baichuan.hy.tool.util.UndoUtil;
import com.baichuan.hy.tool.util.codeformatter.CodeFormatterFactory;
import lombok.Getter;
import org.fife.ui.rsyntaxtextarea.SyntaxConstants;

import javax.swing.*;
import java.awt.*;

@Getter
public class FileReformattingForm {
    private JPanel reformattingPanel;
    private JComboBox fileType;
    private JComboBox spaceNum;
    private JTextArea resultArea;
    private JButton uploadFile;
    private JButton reformat;
    private JLabel selectFileName;
    private JTabbedPane tabbedPane1;
    private JButton formatButton;
    private JPanel contentPanel;
    private JPanel controlPanel;
    private JComboBox stringTypeComboBox;

    private RegexRSyntaxTextViewer textArea;
    private RegexRTextScrollPane scrollPane;

    private static FileReformattingForm fileReformattingForm;

    public static FileReformattingForm getInstance() {
        if (null == fileReformattingForm) {
            fileReformattingForm = new FileReformattingForm();
        }
        return fileReformattingForm;
    }

    private FileReformattingForm() {
        textArea = new RegexRSyntaxTextViewer();
        scrollPane = new RegexRTextScrollPane(textArea);

        stringTypeComboBox.addItem("Nginx配置");
        stringTypeComboBox.addItem("Java");
        stringTypeComboBox.addItem("XML");
        stringTypeComboBox.addItem("HTML");

        UndoUtil.register(this);
    }

    public static void init() {
        fileReformattingForm = getInstance();
        fileReformattingForm.getContentPanel().add(fileReformattingForm.getScrollPane());
        changeStringType();
        FileReformatListener.ParameterBuilder.builder()
                .buildFileType(fileReformattingForm.getFileType())
                .buildSpaceNum(fileReformattingForm.getSpaceNum())
                .buildResultPanel(fileReformattingForm.getResultArea())
                .buildUploadBtn(fileReformattingForm.getUploadFile())
                .buildReformatBtn(fileReformattingForm.getReformat())
                .buildSelectFileLabel(fileReformattingForm.getSelectFileName())
                .start();

        FileReformatListener.addListeners();
    }

    public static void changeStringType() {
        fileReformattingForm = getInstance();

        String selectedItem = (String) fileReformattingForm.getStringTypeComboBox().getSelectedItem();
        if ("Nginx配置".equals(selectedItem)) {
            fileReformattingForm.getTextArea().setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_INI);
        } else if ("Java".equals(selectedItem)) {
            fileReformattingForm.getTextArea().setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVA);
        } else if ("XML".equals(selectedItem)) {
            fileReformattingForm.getTextArea().setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_XML);
        } else if ("HTML".equals(selectedItem)) {
            fileReformattingForm.getTextArea().setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_HTML);
        }
    }

    public static void format() {
        fileReformattingForm = getInstance();
        String text = fileReformattingForm.getTextArea().getText();
        String stringType = (String) fileReformattingForm.getStringTypeComboBox().getSelectedItem();

        if ("Nginx配置".equals(stringType)) {
            text = CodeFormatterFactory.getFormatter(CodeFormatterFactory.FormatterType.NGINX).format(text);
        } else if ("Java".equals(stringType)) {
            text = CodeFormatterFactory.getFormatter(CodeFormatterFactory.FormatterType.JAVA).format(text);
        } else if ("XML".equals(stringType)) {
            text = CodeFormatterFactory.getFormatter(CodeFormatterFactory.FormatterType.XML).format(text);
        } else if ("HTML".equals(stringType)) {
            text = CodeFormatterFactory.getFormatter(CodeFormatterFactory.FormatterType.HTML).format(text);
        }

        fileReformattingForm.getTextArea().setText(text);
        // 回到顶部
        fileReformattingForm.getTextArea().setCaretPosition(0);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        reformattingPanel = new JPanel();
        reformattingPanel.setLayout(new GridLayoutManager(1, 1, new Insets(10, 0, 0, 0), -1, -1));
        tabbedPane1 = new JTabbedPane();
        reformattingPanel.add(tabbedPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        tabbedPane1.addTab("字符串", panel1);
        contentPanel = new JPanel();
        contentPanel.setLayout(new BorderLayout(0, 0));
        panel1.add(contentPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        controlPanel = new JPanel();
        controlPanel.setLayout(new GridLayoutManager(1, 4, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(controlPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        formatButton = new JButton();
        formatButton.setText("格式化");
        controlPanel.add(formatButton, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        controlPanel.add(spacer1, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("文本类型");
        controlPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        stringTypeComboBox = new JComboBox();
        controlPanel.add(stringTypeComboBox, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPane1.addTab("文件", panel2);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        panel2.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(2, 8, new Insets(0, 0, 0, 0), -1, -1));
        panel3.add(panel4, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("文件类型");
        panel4.add(label2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel4.add(spacer2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        fileType = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("XML");
        defaultComboBoxModel1.addElement("HTML");
        defaultComboBoxModel1.addElement("JAVA");
        fileType.setModel(defaultComboBoxModel1);
        panel4.add(fileType, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("空格数量");
        panel4.add(label3, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        spaceNum = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel2 = new DefaultComboBoxModel();
        defaultComboBoxModel2.addElement("2");
        defaultComboBoxModel2.addElement("3");
        defaultComboBoxModel2.addElement("4");
        defaultComboBoxModel2.addElement("5");
        defaultComboBoxModel2.addElement("6");
        spaceNum.setModel(defaultComboBoxModel2);
        panel4.add(spaceNum, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        uploadFile = new JButton();
        uploadFile.setText("选择文件");
        panel4.add(uploadFile, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        reformat = new JButton();
        reformat.setText("格式化");
        panel4.add(reformat, new GridConstraints(0, 7, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        selectFileName = new JLabel();
        selectFileName.setText("");
        panel4.add(selectFileName, new GridConstraints(0, 5, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        panel4.add(spacer3, new GridConstraints(0, 6, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel3.add(scrollPane1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        resultArea = new JTextArea();
        scrollPane1.setViewportView(resultArea);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return reformattingPanel;
    }

}
